//Memory of 8 registers, each 16 bits wide.
CHIP RAM8 {
    IN in[16], load, address[3];    // Entradas: valor de 16 bits, control de carga, dirección de 3 bits
    OUT out[16];                    // Salida: valor almacenado en la dirección seleccionada

    PARTS:
    // distribuye la señal load a uno de los 8 registros según address
    DMux8Way(in=load, sel=address, a=load0, b=load1, c=load2, d=load3, e=load4, f=load5, g=load6, h=load7);

    // 8 Registers: cada uno almacena un valor de 16 bits
    Register(in=in, load=load0, out=out0);
    Register(in=in, load=load1, out=out1);
    Register(in=in, load=load2, out=out2);
    Register(in=in, load=load3, out=out3);
    Register(in=in, load=load4, out=out4);
    Register(in=in, load=load5, out=out5);
    Register(in=in, load=load6, out=out6);
    Register(in=in, load=load7, out=out7);

    // selecciona la salida de uno de los 8 registros según address
    Mux8Way16(a=out0, b=out1, c=out2, d=out3, e=out4, f=out5, g=out6, h=out7, sel=address, out=out);
}
